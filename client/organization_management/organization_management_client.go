// Code generated by go-swagger; DO NOT EDIT.

package organization_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the organization management client
type API interface {
	/*
	   AddUserToOrganization adds user to organization

	   Adds user to organization*/
	AddUserToOrganization(ctx context.Context, params *AddUserToOrganizationParams) (*AddUserToOrganizationOK, error)
	/*
	   CreateOrganization creates organization

	   Creates a new organization*/
	CreateOrganization(ctx context.Context, params *CreateOrganizationParams) (*CreateOrganizationCreated, error)
	/*
	   DeleteOrganization deletes specific organization

	   Delete organization with given organizationId*/
	DeleteOrganization(ctx context.Context, params *DeleteOrganizationParams) (*DeleteOrganizationOK, error)
	/*
	   DeleteUserFromOrganization deletes user from organization

	   Delete user from organization*/
	DeleteUserFromOrganization(ctx context.Context, params *DeleteUserFromOrganizationParams) (*DeleteUserFromOrganizationOK, error)
	/*
	   GetOrganization gets specific organization

	   get organization with given organizationId*/
	GetOrganization(ctx context.Context, params *GetOrganizationParams) (*GetOrganizationOK, error)
	/*
	   ListOrganizations lists organizations

	   lists all organizations*/
	ListOrganizations(ctx context.Context, params *ListOrganizationsParams) (*ListOrganizationsOK, error)
	/*
	   UpdateOrganization updates specific organization

	   Update organization with given organizationId*/
	UpdateOrganization(ctx context.Context, params *UpdateOrganizationParams) (*UpdateOrganizationOK, error)
}

// New creates a new organization management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for organization management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
AddUserToOrganization adds user to organization

Adds user to organization
*/
func (a *Client) AddUserToOrganization(ctx context.Context, params *AddUserToOrganizationParams) (*AddUserToOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addUserToOrganization",
		Method:             "PUT",
		PathPattern:        "/organization/{id}/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddUserToOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddUserToOrganizationOK), nil

}

/*
CreateOrganization creates organization

Creates a new organization
*/
func (a *Client) CreateOrganization(ctx context.Context, params *CreateOrganizationParams) (*CreateOrganizationCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrganization",
		Method:             "POST",
		PathPattern:        "/organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOrganizationCreated), nil

}

/*
DeleteOrganization deletes specific organization

Delete organization with given organizationId
*/
func (a *Client) DeleteOrganization(ctx context.Context, params *DeleteOrganizationParams) (*DeleteOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganization",
		Method:             "DELETE",
		PathPattern:        "/organization/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrganizationOK), nil

}

/*
DeleteUserFromOrganization deletes user from organization

Delete user from organization
*/
func (a *Client) DeleteUserFromOrganization(ctx context.Context, params *DeleteUserFromOrganizationParams) (*DeleteUserFromOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserFromOrganization",
		Method:             "DELETE",
		PathPattern:        "/organization/{id}/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUserFromOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserFromOrganizationOK), nil

}

/*
GetOrganization gets specific organization

get organization with given organizationId
*/
func (a *Client) GetOrganization(ctx context.Context, params *GetOrganizationParams) (*GetOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganization",
		Method:             "GET",
		PathPattern:        "/organization/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationOK), nil

}

/*
ListOrganizations lists organizations

lists all organizations
*/
func (a *Client) ListOrganizations(ctx context.Context, params *ListOrganizationsParams) (*ListOrganizationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listOrganizations",
		Method:             "GET",
		PathPattern:        "/organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListOrganizationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListOrganizationsOK), nil

}

/*
UpdateOrganization updates specific organization

Update organization with given organizationId
*/
func (a *Client) UpdateOrganization(ctx context.Context, params *UpdateOrganizationParams) (*UpdateOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganization",
		Method:             "PUT",
		PathPattern:        "/organization/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateOrganizationOK), nil

}
