// Code generated by go-swagger; DO NOT EDIT.

package hpc_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the hpc management client
type API interface {
	/*
	   CreateHPCResource creates h p c resource

	   Creates a new HPCResource*/
	CreateHPCResource(ctx context.Context, params *CreateHPCResourceParams) (*CreateHPCResourceCreated, error)
	/*
	   DeleteHPCResource deletes specific h p c resource

	   Delete HPCResource with given id*/
	DeleteHPCResource(ctx context.Context, params *DeleteHPCResourceParams) (*DeleteHPCResourceOK, error)
	/*
	   GetHPCResource gets specific h p c resource

	   get HPCResource with given id*/
	GetHPCResource(ctx context.Context, params *GetHPCResourceParams) (*GetHPCResourceOK, error)
	/*
	   ListHPCResources lists h p c resource

	   lists all HPCResource*/
	ListHPCResources(ctx context.Context, params *ListHPCResourcesParams) (*ListHPCResourcesOK, error)
	/*
	   UpdateHPCResource updates specific h p c resource

	   Update HPCResource with given id*/
	UpdateHPCResource(ctx context.Context, params *UpdateHPCResourceParams) (*UpdateHPCResourceOK, error)
}

// New creates a new hpc management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for hpc management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateHPCResource creates h p c resource

Creates a new HPCResource
*/
func (a *Client) CreateHPCResource(ctx context.Context, params *CreateHPCResourceParams) (*CreateHPCResourceCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createHPCResource",
		Method:             "POST",
		PathPattern:        "/hpc/resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateHPCResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateHPCResourceCreated), nil

}

/*
DeleteHPCResource deletes specific h p c resource

Delete HPCResource with given id
*/
func (a *Client) DeleteHPCResource(ctx context.Context, params *DeleteHPCResourceParams) (*DeleteHPCResourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHPCResource",
		Method:             "DELETE",
		PathPattern:        "/hpc/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteHPCResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteHPCResourceOK), nil

}

/*
GetHPCResource gets specific h p c resource

get HPCResource with given id
*/
func (a *Client) GetHPCResource(ctx context.Context, params *GetHPCResourceParams) (*GetHPCResourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHPCResource",
		Method:             "GET",
		PathPattern:        "/hpc/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetHPCResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHPCResourceOK), nil

}

/*
ListHPCResources lists h p c resource

lists all HPCResource
*/
func (a *Client) ListHPCResources(ctx context.Context, params *ListHPCResourcesParams) (*ListHPCResourcesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listHPCResources",
		Method:             "GET",
		PathPattern:        "/hpc/resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListHPCResourcesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListHPCResourcesOK), nil

}

/*
UpdateHPCResource updates specific h p c resource

Update HPCResource with given id
*/
func (a *Client) UpdateHPCResource(ctx context.Context, params *UpdateHPCResourceParams) (*UpdateHPCResourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHPCResource",
		Method:             "PUT",
		PathPattern:        "/hpc/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateHPCResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateHPCResourceOK), nil

}
