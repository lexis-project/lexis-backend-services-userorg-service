// Code generated by go-swagger; DO NOT EDIT.

package project_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the project management client
type API interface {
	/*
	   AddUserToProject adds user to project

	   Add user to project*/
	AddUserToProject(ctx context.Context, params *AddUserToProjectParams) (*AddUserToProjectOK, error)
	/*
	   CreateProject creates project

	   Creates a new project*/
	CreateProject(ctx context.Context, params *CreateProjectParams) (*CreateProjectCreated, error)
	/*
	   DeleteProject deletes specific project

	   Delete project with given id*/
	DeleteProject(ctx context.Context, params *DeleteProjectParams) (*DeleteProjectOK, error)
	/*
	   DeleteUserFromProject deletes user from project

	   Delete user from project*/
	DeleteUserFromProject(ctx context.Context, params *DeleteUserFromProjectParams) (*DeleteUserFromProjectOK, error)
	/*
	   GetProject gets specific project

	   get project with given id*/
	GetProject(ctx context.Context, params *GetProjectParams) (*GetProjectOK, error)
	/*
	   ListProjects lists projects

	   lists all projects*/
	ListProjects(ctx context.Context, params *ListProjectsParams) (*ListProjectsOK, error)
	/*
	   UpdateProject updates specific project

	   Update project with given id*/
	UpdateProject(ctx context.Context, params *UpdateProjectParams) (*UpdateProjectOK, error)
}

// New creates a new project management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for project management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
AddUserToProject adds user to project

Add user to project
*/
func (a *Client) AddUserToProject(ctx context.Context, params *AddUserToProjectParams) (*AddUserToProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addUserToProject",
		Method:             "PUT",
		PathPattern:        "/project/{id}/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddUserToProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddUserToProjectOK), nil

}

/*
CreateProject creates project

Creates a new project
*/
func (a *Client) CreateProject(ctx context.Context, params *CreateProjectParams) (*CreateProjectCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProjectCreated), nil

}

/*
DeleteProject deletes specific project

Delete project with given id
*/
func (a *Client) DeleteProject(ctx context.Context, params *DeleteProjectParams) (*DeleteProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProjectOK), nil

}

/*
DeleteUserFromProject deletes user from project

Delete user from project
*/
func (a *Client) DeleteUserFromProject(ctx context.Context, params *DeleteUserFromProjectParams) (*DeleteUserFromProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserFromProject",
		Method:             "DELETE",
		PathPattern:        "/project/{id}/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUserFromProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserFromProjectOK), nil

}

/*
GetProject gets specific project

get project with given id
*/
func (a *Client) GetProject(ctx context.Context, params *GetProjectParams) (*GetProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProject",
		Method:             "GET",
		PathPattern:        "/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectOK), nil

}

/*
ListProjects lists projects

lists all projects
*/
func (a *Client) ListProjects(ctx context.Context, params *ListProjectsParams) (*ListProjectsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProjects",
		Method:             "GET",
		PathPattern:        "/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProjectsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProjectsOK), nil

}

/*
UpdateProject updates specific project

Update project with given id
*/
func (a *Client) UpdateProject(ctx context.Context, params *UpdateProjectParams) (*UpdateProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProject",
		Method:             "PUT",
		PathPattern:        "/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProjectOK), nil

}
