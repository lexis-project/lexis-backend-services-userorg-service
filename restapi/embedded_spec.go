// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "An API which supports management of customers and organizations within the LEXIS portal; this version is intended for use in LEXIS Portal R1",
    "title": "User-Organization API",
    "contact": {
      "email": "diego@cyclops-labs.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.3.2021-12-15"
  },
  "host": "localhost:8000",
  "basePath": "/api/v0.3",
  "paths": {
    "/authz/{userID}/add/{role}": {
      "post": {
        "description": "It adds a role to the user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "accessManagement"
        ],
        "summary": "add a role to the specified user",
        "operationId": "addRole",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the user to be modified",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role to be added",
            "name": "role",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the organization linked",
            "name": "organizationID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the project linked",
            "name": "projectID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Short name of the project linked",
            "name": "projectShortName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Role added successfully",
            "schema": {
              "$ref": "#/definitions/RoleAdded"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user/org/prj not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/authz/{userID}/clear": {
      "post": {
        "description": "It clears the actual role of the user and assignes a end_user one",
        "produces": [
          "application/json"
        ],
        "tags": [
          "accessManagement"
        ],
        "summary": "clears the actual role of the user and assignes a end_user one",
        "operationId": "clearRole",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the user to be modified",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the organization linked",
            "name": "organizationID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the project linked",
            "name": "projectID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Short name of the project linked",
            "name": "projectShortName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Role added successfully",
            "schema": {
              "$ref": "#/definitions/RoleAdded"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user/org/prj not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/hpc/resource": {
      "get": {
        "description": "lists all HPCResource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "hpcManagement"
        ],
        "summary": "list HPCResource",
        "operationId": "listHPCResources",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "ALL",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of HPCResources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HPCResource"
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new HPCResource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hpcManagement"
        ],
        "summary": "create HPCResource",
        "operationId": "createHPCResource",
        "parameters": [
          {
            "description": "HPCResource to be added",
            "name": "HPCResource",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "HPCResource created",
            "schema": {
              "$ref": "#/definitions/CreatedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/hpc/resource/{id}": {
      "get": {
        "description": "get HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hpcManagement"
        ],
        "summary": "Get specific HPCResource",
        "operationId": "getHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HPCResource returned",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hpcManagement"
        ],
        "summary": "Update specific HPCResource",
        "operationId": "updateHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated HPCResource data to be added",
            "name": "HPCResource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated HPCResource",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hpcManagement"
        ],
        "summary": "Delete specific HPCResource",
        "operationId": "deleteHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted HPCResource",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization": {
      "get": {
        "description": "lists all organizations",
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "list organizations",
        "operationId": "listOrganizations",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "OWN",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of organizations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "create Organization",
        "operationId": "createOrganization",
        "parameters": [
          {
            "description": "Organization to be added",
            "name": "organization",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "organization created",
            "schema": {
              "$ref": "#/definitions/CreatedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization/{id}": {
      "get": {
        "description": "get organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "Get specific organization",
        "operationId": "getOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "organization returned",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "Update specific organization",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated organization data to be added",
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated organization",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "Delete specific organization",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted organization",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization/{id}/user/{userID}": {
      "put": {
        "description": "Adds user to organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "Adds user to organization",
        "operationId": "addUserToOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be added",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user updated",
            "schema": {
              "$ref": "#/definitions/OKResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user from organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "Delete user from organization",
        "operationId": "deleteUserFromOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be removed",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted user from organization",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization or user not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project": {
      "get": {
        "description": "lists all projects",
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "list projects",
        "operationId": "listProjects",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "ALL",
            "description": "project scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of projectss",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "create Project",
        "operationId": "createProject",
        "parameters": [
          {
            "description": "Project to be added",
            "name": "project",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "project created",
            "schema": {
              "$ref": "#/definitions/CreatedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Shortname duplicated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/{id}": {
      "get": {
        "description": "get project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "Get specific project",
        "operationId": "getProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "project returned",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "Update specific project",
        "operationId": "updateProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated project data to be added",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "422": {
            "description": "Shortname duplicated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "Delete specific project",
        "operationId": "deleteProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted project",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/{id}/user/{userID}": {
      "put": {
        "description": "Add user to project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "Add user to project",
        "operationId": "addUserToProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be added",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user updated",
            "schema": {
              "$ref": "#/definitions/OKResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project or user not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user from project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "Delete user from project",
        "operationId": "deleteUserFromProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be removed",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted user from project",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project or user not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "security": [
          {
            "Keycloak": [
              "lex_adm",
              "lex_sup",
              "org_mgr",
              "prj_mgr",
              "dat_mgr",
              "end_usr"
            ]
          },
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyParam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statusManagement"
        ],
        "summary": "Basic status of the system",
        "operationId": "showStatus",
        "responses": {
          "200": {
            "description": "Status information of the system",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    },
    "/status/{id}": {
      "get": {
        "security": [
          {
            "Keycloak": [
              "lex_adm",
              "lex_sup",
              "org_mgr",
              "prj_mgr",
              "dat_mgr",
              "end_usr"
            ]
          },
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyParam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statusManagement"
        ],
        "summary": "Basic status of the system",
        "operationId": "getStatus",
        "parameters": [
          {
            "enum": [
              "status",
              "user",
              "organization",
              "project",
              "hpcresource"
            ],
            "type": "string",
            "description": "Id of the endpoint to be checked",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status information of the system",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "The endpoint provided doesn't exis",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "lists all users (tbd - pagination?)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userManagement"
        ],
        "summary": "List all users",
        "operationId": "listUsers",
        "parameters": [
          {
            "type": "string",
            "format": "email",
            "description": "email to filter when listing",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "project uuid to filter when listing",
            "name": "project",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "users permissions switch",
            "name": "permissions",
            "in": "query"
          },
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "OWN",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of users returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userManagement"
        ],
        "summary": "Create a user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "User to be added",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user created",
            "schema": {
              "$ref": "#/definitions/CreatedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "description": "get user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userManagement"
        ],
        "summary": "Get specific user",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "keycloak Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "permissions switch",
            "name": "permissions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "user returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user with userId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userManagement"
        ],
        "summary": "Update specific user",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated user data to be added",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user with userId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userManagement"
        ],
        "summary": "Delete specific user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user deleted successfully",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user with userId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ConflictResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "CreatedResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Link": {
          "type": "string"
        }
      }
    },
    "DeletedResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "HPCResource": {
      "type": "object",
      "properties": {
        "ApprovalStatus": {
          "type": "string",
          "enum": [
            "ACCEPTED",
            "REJECTED",
            "PENDING"
          ],
          "x-go-custom-tag": "gorm:\"column:approvalstatus\""
        },
        "AssociatedHPCProject": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:associatedhpcproject\""
        },
        "AssociatedLEXISProject": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:associatedlexisproject;type:uuid\""
        },
        "CloudNetworkName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:cloudnetworkname\""
        },
        "HEAppEEndpoint": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:heappeendpoint\""
        },
        "HPCProvider": {
          "type": "string",
          "enum": [
            "IT4I",
            "LRZ",
            "ICHEC"
          ],
          "x-go-custom-tag": "gorm:\"column:hpcprovider\""
        },
        "HPCResourceID": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:hpcresourceid;primary_key;unique;default:md5(random()::text || clock_timestamp()::text)::uuid\""
        },
        "OpenStackEndpoint": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:openstackendpoint\""
        },
        "OpenStackProjectID": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:openstackprojectid\""
        },
        "ProjectNetworkName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:projectnetworkname\""
        },
        "ResourceType": {
          "type": "string",
          "enum": [
            "CLOUD",
            "HPC",
            "SMARTGW"
          ],
          "x-go-custom-tag": "gorm:\"column:resourcetype\""
        },
        "TermsConsent": {
          "type": "boolean",
          "x-go-custom-tag": "gorm:\"column:termsconsent;type:bool\""
        }
      }
    },
    "Metadata": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "gitlab.com/cyclops-utilities/datamodels"
        },
        "type": "JSONdb"
      }
    },
    "MissingResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "OKResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "CreatedBy": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:createdby;type:uuid\""
        },
        "CreationDate": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:registrationdatetime;type:timestamptz;default:now()\""
        },
        "FormalName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:formalname\""
        },
        "ID": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"type:uuid;primary_key;unique;default:md5(random()::text || clock_timestamp()::text)::uuid\""
        },
        "OrganizationEmailAddress": {
          "type": "string",
          "format": "email",
          "x-go-custom-tag": "gorm:\"column:organizationemailaddress\""
        },
        "OrganizationStatus": {
          "type": "string",
          "enum": [
            "PENDING_APPROVAL",
            "APPROVED",
            "DISABLED",
            "TERMINATED"
          ],
          "x-go-custom-tag": "gorm:\"column:organizationstatus\""
        },
        "PrimaryTelephoneNumber": {
          "type": "string",
          "format": "telephone-number",
          "x-go-custom-tag": "gorm:\"column:primarytelephonenumber\""
        },
        "RegisteredAddress1": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:registeredaddress1\""
        },
        "RegisteredAddress2": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:registeredaddress2\""
        },
        "RegisteredAddress3": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:registeredaddress3\""
        },
        "RegisteredCountry": {
          "type": "string",
          "format": "country",
          "x-go-custom-tag": "gorm:\"column:registeredcountry\""
        },
        "VATRegistrationNumber": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:vatregistrationnumber\""
        },
        "Website": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "AllowedOrganizations": {
          "x-go-custom-tag": "gorm:\"column:allowedorganizations;type:text[]\"",
          "$ref": "#/definitions/StringArray"
        },
        "LinkedOrganization": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:linkedorganization;type:uuid\""
        },
        "NormCoreHours": {
          "type": "integer",
          "default": 0,
          "x-go-custom-tag": "gorm:\"column:normcorehours;default:0\"",
          "x-nullable": true
        },
        "ProjectContactEmail": {
          "type": "string",
          "format": "email",
          "x-go-custom-tag": "gorm:\"column:projectcontactemail\""
        },
        "ProjectContactPerson": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:projectcontactperson;type:uuid\""
        },
        "ProjectCreatedBy": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:projectcreatedby;type:uuid\""
        },
        "ProjectCreationTime": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:projectcreationtime;type:timestamptz;default:now()\""
        },
        "ProjectDescription": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:projectdescription\""
        },
        "ProjectDomain": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:projectdomain\""
        },
        "ProjectID": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:projectid;type:uuid;primary_key;unique;default:md5(random()::text || clock_timestamp()::text)::uuid\""
        },
        "ProjectMaxPrice": {
          "type": "number",
          "format": "double",
          "default": 0,
          "x-go-custom-tag": "gorm:\"column:projectmaxprice;type:float8;default:0.0\"",
          "x-nullable": true
        },
        "ProjectName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:projectname\""
        },
        "ProjectShortName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:projectshortname;unique\""
        },
        "ProjectStartDate": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:projectstartdate;type:timestamptz\""
        },
        "ProjectStatus": {
          "type": "string",
          "enum": [
            "PENDING",
            "ACTIVE",
            "DISABLED",
            "TERMINATED"
          ],
          "x-go-custom-tag": "gorm:\"column:projectstatus\""
        },
        "ProjectTerminationDate": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:projectterminationdate;type:timestamptz\""
        }
      }
    },
    "RoleAdded": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "AverageResponseTime": {
          "type": "number",
          "format": "double"
        },
        "EndpointsResponseTime": {
          "$ref": "#/definitions/Metadata"
        },
        "LastRequest": {
          "type": "string"
        },
        "RequestsBoT": {
          "type": "integer"
        },
        "RequestsLastHour": {
          "type": "integer"
        },
        "RequestsToday": {
          "type": "integer"
        },
        "SystemState": {
          "type": "string"
        }
      }
    },
    "StringArray": {
      "x-go-type": {
        "import": {
          "package": "github.com/lib/pq"
        },
        "type": "StringArray"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "AgreeToUseOfCookies": {
          "type": "boolean",
          "x-go-custom-tag": "gorm:\"column:agreetouseofcookies;type:bool\""
        },
        "AgreedToTermsOfUse": {
          "type": "boolean",
          "x-go-custom-tag": "gorm:\"column:agreedtotermsofuse;type:bool\""
        },
        "AllowedOrganizations": {
          "x-go-custom-tag": "gorm:\"column:allowedorganizations;type:text[]\"",
          "$ref": "#/definitions/StringArray"
        },
        "DateOfAgreementToTermsOfUse": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:dateofagreementtotermsofuse;type:timestamptz;default:now()\""
        },
        "DateOfAgreementToUseOfCookies": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:dateofagreementtouseofcookies;type:timestamptz;default:now()\""
        },
        "EmailAddress": {
          "type": "string",
          "format": "email",
          "x-go-custom-tag": "gorm:\"column:emailaddress\""
        },
        "FirstName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:firstname\""
        },
        "ID": {
          "description": "This is an id generated by keycloak",
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"type:uuid;primary_key\""
        },
        "LastName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:lastname\""
        },
        "OrganizationID": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:organizationid\""
        },
        "PGPKeyID": {
          "description": "This is an id for a PGP Key - what it means is still tbd",
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:pgpkeyid\""
        },
        "Permissions": {
          "x-go-custom-tag": "gorm:\"-\"",
          "$ref": "#/definitions/Metadata"
        },
        "Projects": {
          "x-go-custom-tag": "gorm:\"column:projects;type:text[]\"",
          "$ref": "#/definitions/StringArray"
        },
        "RegistrationDateTime": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:registrationdatetime;type:timestamptz;default:now()\""
        },
        "TermsOfUseVersion": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:termsofuseversion\""
        },
        "UserStatus": {
          "type": "string",
          "enum": [
            "ENABLED",
            "DISABLED"
          ],
          "x-go-custom-tag": "gorm:\"column:userstatus\""
        },
        "Username": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:username\""
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "name": "X-API-KEY",
      "in": "header"
    },
    "APIKeyParam": {
      "type": "apiKey",
      "name": "api_key",
      "in": "query"
    },
    "Keycloak": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "http://localhost:8080/auth/realms/Dev/protocol/openid-connect/auth",
      "tokenUrl": "http://localhost:8080/auth/realms/Dev/protocol/openid-connect/token",
      "scopes": {
        "dat_mgr": "Datasets Manager",
        "end_usr": "Plain user",
        "lex_adm": "$Deity scope, can do absoulutely anything",
        "lex_sup": "$Deity scope with restrictions.",
        "org_mgr": "Organization Manager",
        "prj_mgr": "Project/Workflows Manager"
      }
    }
  },
  "security": [
    {
      "Keycloak": [
        "lex_adm",
        "lex_sup",
        "org_mgr",
        "prj_mgr",
        "dat_mgr",
        "end_usr"
      ]
    }
  ],
  "tags": [
    {
      "description": "Actions relating to the access control and roles of the users",
      "name": "accessManagement"
    },
    {
      "description": "Actions relating to the reporting of the state of the service",
      "name": "statusManagement"
    },
    {
      "description": "Actions relating to management of users",
      "name": "userManagement"
    },
    {
      "description": "Actions relating to management of organizations",
      "name": "organizationManagement"
    },
    {
      "description": "Actions relating to management of projects",
      "name": "projectManagement"
    },
    {
      "description": "Actions relating to management of hpc resources",
      "name": "hpcManagement"
    },
    {
      "description": "Actions relating to management of the invitations to join organizations/projects",
      "name": "invitationsManagement"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "An API which supports management of customers and organizations within the LEXIS portal; this version is intended for use in LEXIS Portal R1",
    "title": "User-Organization API",
    "contact": {
      "email": "diego@cyclops-labs.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.3.2021-12-15"
  },
  "host": "localhost:8000",
  "basePath": "/api/v0.3",
  "paths": {
    "/authz/{userID}/add/{role}": {
      "post": {
        "description": "It adds a role to the user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "accessManagement"
        ],
        "summary": "add a role to the specified user",
        "operationId": "addRole",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the user to be modified",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role to be added",
            "name": "role",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the organization linked",
            "name": "organizationID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the project linked",
            "name": "projectID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Short name of the project linked",
            "name": "projectShortName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Role added successfully",
            "schema": {
              "$ref": "#/definitions/RoleAdded"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user/org/prj not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/authz/{userID}/clear": {
      "post": {
        "description": "It clears the actual role of the user and assignes a end_user one",
        "produces": [
          "application/json"
        ],
        "tags": [
          "accessManagement"
        ],
        "summary": "clears the actual role of the user and assignes a end_user one",
        "operationId": "clearRole",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the user to be modified",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the organization linked",
            "name": "organizationID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the project linked",
            "name": "projectID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Short name of the project linked",
            "name": "projectShortName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Role added successfully",
            "schema": {
              "$ref": "#/definitions/RoleAdded"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user/org/prj not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/hpc/resource": {
      "get": {
        "description": "lists all HPCResource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "hpcManagement"
        ],
        "summary": "list HPCResource",
        "operationId": "listHPCResources",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "ALL",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of HPCResources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HPCResource"
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new HPCResource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hpcManagement"
        ],
        "summary": "create HPCResource",
        "operationId": "createHPCResource",
        "parameters": [
          {
            "description": "HPCResource to be added",
            "name": "HPCResource",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "HPCResource created",
            "schema": {
              "$ref": "#/definitions/CreatedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/hpc/resource/{id}": {
      "get": {
        "description": "get HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hpcManagement"
        ],
        "summary": "Get specific HPCResource",
        "operationId": "getHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HPCResource returned",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hpcManagement"
        ],
        "summary": "Update specific HPCResource",
        "operationId": "updateHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated HPCResource data to be added",
            "name": "HPCResource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated HPCResource",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hpcManagement"
        ],
        "summary": "Delete specific HPCResource",
        "operationId": "deleteHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted HPCResource",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization": {
      "get": {
        "description": "lists all organizations",
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "list organizations",
        "operationId": "listOrganizations",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "OWN",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of organizations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "create Organization",
        "operationId": "createOrganization",
        "parameters": [
          {
            "description": "Organization to be added",
            "name": "organization",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "organization created",
            "schema": {
              "$ref": "#/definitions/CreatedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization/{id}": {
      "get": {
        "description": "get organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "Get specific organization",
        "operationId": "getOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "organization returned",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "Update specific organization",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated organization data to be added",
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated organization",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "Delete specific organization",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted organization",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization/{id}/user/{userID}": {
      "put": {
        "description": "Adds user to organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "Adds user to organization",
        "operationId": "addUserToOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be added",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user updated",
            "schema": {
              "$ref": "#/definitions/OKResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user from organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "organizationManagement"
        ],
        "summary": "Delete user from organization",
        "operationId": "deleteUserFromOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be removed",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted user from organization",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization or user not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project": {
      "get": {
        "description": "lists all projects",
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "list projects",
        "operationId": "listProjects",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "ALL",
            "description": "project scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of projectss",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "create Project",
        "operationId": "createProject",
        "parameters": [
          {
            "description": "Project to be added",
            "name": "project",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "project created",
            "schema": {
              "$ref": "#/definitions/CreatedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Shortname duplicated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/{id}": {
      "get": {
        "description": "get project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "Get specific project",
        "operationId": "getProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "project returned",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "Update specific project",
        "operationId": "updateProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated project data to be added",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "422": {
            "description": "Shortname duplicated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "Delete specific project",
        "operationId": "deleteProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted project",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/{id}/user/{userID}": {
      "put": {
        "description": "Add user to project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "Add user to project",
        "operationId": "addUserToProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be added",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user updated",
            "schema": {
              "$ref": "#/definitions/OKResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project or user not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user from project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "projectManagement"
        ],
        "summary": "Delete user from project",
        "operationId": "deleteUserFromProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be removed",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted user from project",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project or user not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "security": [
          {
            "Keycloak": [
              "dat_mgr",
              "end_usr",
              "lex_adm",
              "lex_sup",
              "org_mgr",
              "prj_mgr"
            ]
          },
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyParam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statusManagement"
        ],
        "summary": "Basic status of the system",
        "operationId": "showStatus",
        "responses": {
          "200": {
            "description": "Status information of the system",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    },
    "/status/{id}": {
      "get": {
        "security": [
          {
            "Keycloak": [
              "dat_mgr",
              "end_usr",
              "lex_adm",
              "lex_sup",
              "org_mgr",
              "prj_mgr"
            ]
          },
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyParam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statusManagement"
        ],
        "summary": "Basic status of the system",
        "operationId": "getStatus",
        "parameters": [
          {
            "enum": [
              "status",
              "user",
              "organization",
              "project",
              "hpcresource"
            ],
            "type": "string",
            "description": "Id of the endpoint to be checked",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status information of the system",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "The endpoint provided doesn't exis",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "lists all users (tbd - pagination?)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userManagement"
        ],
        "summary": "List all users",
        "operationId": "listUsers",
        "parameters": [
          {
            "type": "string",
            "format": "email",
            "description": "email to filter when listing",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "project uuid to filter when listing",
            "name": "project",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "users permissions switch",
            "name": "permissions",
            "in": "query"
          },
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "OWN",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of users returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userManagement"
        ],
        "summary": "Create a user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "User to be added",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user created",
            "schema": {
              "$ref": "#/definitions/CreatedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "description": "get user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userManagement"
        ],
        "summary": "Get specific user",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "keycloak Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "permissions switch",
            "name": "permissions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "user returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user with userId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userManagement"
        ],
        "summary": "Update specific user",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated user data to be added",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user with userId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userManagement"
        ],
        "summary": "Delete specific user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user deleted successfully",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user with userId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ConflictResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "CreatedResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Link": {
          "type": "string"
        }
      }
    },
    "DeletedResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "HPCResource": {
      "type": "object",
      "properties": {
        "ApprovalStatus": {
          "type": "string",
          "enum": [
            "ACCEPTED",
            "REJECTED",
            "PENDING"
          ],
          "x-go-custom-tag": "gorm:\"column:approvalstatus\""
        },
        "AssociatedHPCProject": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:associatedhpcproject\""
        },
        "AssociatedLEXISProject": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:associatedlexisproject;type:uuid\""
        },
        "CloudNetworkName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:cloudnetworkname\""
        },
        "HEAppEEndpoint": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:heappeendpoint\""
        },
        "HPCProvider": {
          "type": "string",
          "enum": [
            "IT4I",
            "LRZ",
            "ICHEC"
          ],
          "x-go-custom-tag": "gorm:\"column:hpcprovider\""
        },
        "HPCResourceID": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:hpcresourceid;primary_key;unique;default:md5(random()::text || clock_timestamp()::text)::uuid\""
        },
        "OpenStackEndpoint": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:openstackendpoint\""
        },
        "OpenStackProjectID": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:openstackprojectid\""
        },
        "ProjectNetworkName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:projectnetworkname\""
        },
        "ResourceType": {
          "type": "string",
          "enum": [
            "CLOUD",
            "HPC",
            "SMARTGW"
          ],
          "x-go-custom-tag": "gorm:\"column:resourcetype\""
        },
        "TermsConsent": {
          "type": "boolean",
          "x-go-custom-tag": "gorm:\"column:termsconsent;type:bool\""
        }
      }
    },
    "Metadata": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "gitlab.com/cyclops-utilities/datamodels"
        },
        "type": "JSONdb"
      }
    },
    "MissingResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "OKResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "CreatedBy": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:createdby;type:uuid\""
        },
        "CreationDate": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:registrationdatetime;type:timestamptz;default:now()\""
        },
        "FormalName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:formalname\""
        },
        "ID": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"type:uuid;primary_key;unique;default:md5(random()::text || clock_timestamp()::text)::uuid\""
        },
        "OrganizationEmailAddress": {
          "type": "string",
          "format": "email",
          "x-go-custom-tag": "gorm:\"column:organizationemailaddress\""
        },
        "OrganizationStatus": {
          "type": "string",
          "enum": [
            "PENDING_APPROVAL",
            "APPROVED",
            "DISABLED",
            "TERMINATED"
          ],
          "x-go-custom-tag": "gorm:\"column:organizationstatus\""
        },
        "PrimaryTelephoneNumber": {
          "type": "string",
          "format": "telephone-number",
          "x-go-custom-tag": "gorm:\"column:primarytelephonenumber\""
        },
        "RegisteredAddress1": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:registeredaddress1\""
        },
        "RegisteredAddress2": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:registeredaddress2\""
        },
        "RegisteredAddress3": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:registeredaddress3\""
        },
        "RegisteredCountry": {
          "type": "string",
          "format": "country",
          "x-go-custom-tag": "gorm:\"column:registeredcountry\""
        },
        "VATRegistrationNumber": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:vatregistrationnumber\""
        },
        "Website": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "AllowedOrganizations": {
          "x-go-custom-tag": "gorm:\"column:allowedorganizations;type:text[]\"",
          "$ref": "#/definitions/StringArray"
        },
        "LinkedOrganization": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:linkedorganization;type:uuid\""
        },
        "NormCoreHours": {
          "type": "integer",
          "default": 0,
          "x-go-custom-tag": "gorm:\"column:normcorehours;default:0\"",
          "x-nullable": true
        },
        "ProjectContactEmail": {
          "type": "string",
          "format": "email",
          "x-go-custom-tag": "gorm:\"column:projectcontactemail\""
        },
        "ProjectContactPerson": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:projectcontactperson;type:uuid\""
        },
        "ProjectCreatedBy": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:projectcreatedby;type:uuid\""
        },
        "ProjectCreationTime": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:projectcreationtime;type:timestamptz;default:now()\""
        },
        "ProjectDescription": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:projectdescription\""
        },
        "ProjectDomain": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:projectdomain\""
        },
        "ProjectID": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:projectid;type:uuid;primary_key;unique;default:md5(random()::text || clock_timestamp()::text)::uuid\""
        },
        "ProjectMaxPrice": {
          "type": "number",
          "format": "double",
          "default": 0,
          "x-go-custom-tag": "gorm:\"column:projectmaxprice;type:float8;default:0.0\"",
          "x-nullable": true
        },
        "ProjectName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:projectname\""
        },
        "ProjectShortName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:projectshortname;unique\""
        },
        "ProjectStartDate": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:projectstartdate;type:timestamptz\""
        },
        "ProjectStatus": {
          "type": "string",
          "enum": [
            "PENDING",
            "ACTIVE",
            "DISABLED",
            "TERMINATED"
          ],
          "x-go-custom-tag": "gorm:\"column:projectstatus\""
        },
        "ProjectTerminationDate": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:projectterminationdate;type:timestamptz\""
        }
      }
    },
    "RoleAdded": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "AverageResponseTime": {
          "type": "number",
          "format": "double"
        },
        "EndpointsResponseTime": {
          "$ref": "#/definitions/Metadata"
        },
        "LastRequest": {
          "type": "string"
        },
        "RequestsBoT": {
          "type": "integer"
        },
        "RequestsLastHour": {
          "type": "integer"
        },
        "RequestsToday": {
          "type": "integer"
        },
        "SystemState": {
          "type": "string"
        }
      }
    },
    "StringArray": {
      "x-go-type": {
        "import": {
          "package": "github.com/lib/pq"
        },
        "type": "StringArray"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "AgreeToUseOfCookies": {
          "type": "boolean",
          "x-go-custom-tag": "gorm:\"column:agreetouseofcookies;type:bool\""
        },
        "AgreedToTermsOfUse": {
          "type": "boolean",
          "x-go-custom-tag": "gorm:\"column:agreedtotermsofuse;type:bool\""
        },
        "AllowedOrganizations": {
          "x-go-custom-tag": "gorm:\"column:allowedorganizations;type:text[]\"",
          "$ref": "#/definitions/StringArray"
        },
        "DateOfAgreementToTermsOfUse": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:dateofagreementtotermsofuse;type:timestamptz;default:now()\""
        },
        "DateOfAgreementToUseOfCookies": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:dateofagreementtouseofcookies;type:timestamptz;default:now()\""
        },
        "EmailAddress": {
          "type": "string",
          "format": "email",
          "x-go-custom-tag": "gorm:\"column:emailaddress\""
        },
        "FirstName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:firstname\""
        },
        "ID": {
          "description": "This is an id generated by keycloak",
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"type:uuid;primary_key\""
        },
        "LastName": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:lastname\""
        },
        "OrganizationID": {
          "type": "string",
          "format": "uuid",
          "x-go-custom-tag": "gorm:\"column:organizationid\""
        },
        "PGPKeyID": {
          "description": "This is an id for a PGP Key - what it means is still tbd",
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:pgpkeyid\""
        },
        "Permissions": {
          "x-go-custom-tag": "gorm:\"-\"",
          "$ref": "#/definitions/Metadata"
        },
        "Projects": {
          "x-go-custom-tag": "gorm:\"column:projects;type:text[]\"",
          "$ref": "#/definitions/StringArray"
        },
        "RegistrationDateTime": {
          "type": "string",
          "format": "date-time",
          "x-go-custom-tag": "gorm:\"column:registrationdatetime;type:timestamptz;default:now()\""
        },
        "TermsOfUseVersion": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:termsofuseversion\""
        },
        "UserStatus": {
          "type": "string",
          "enum": [
            "ENABLED",
            "DISABLED"
          ],
          "x-go-custom-tag": "gorm:\"column:userstatus\""
        },
        "Username": {
          "type": "string",
          "x-go-custom-tag": "gorm:\"column:username\""
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "name": "X-API-KEY",
      "in": "header"
    },
    "APIKeyParam": {
      "type": "apiKey",
      "name": "api_key",
      "in": "query"
    },
    "Keycloak": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "http://localhost:8080/auth/realms/Dev/protocol/openid-connect/auth",
      "tokenUrl": "http://localhost:8080/auth/realms/Dev/protocol/openid-connect/token",
      "scopes": {
        "dat_mgr": "Datasets Manager",
        "end_usr": "Plain user",
        "lex_adm": "$Deity scope, can do absoulutely anything",
        "lex_sup": "$Deity scope with restrictions.",
        "org_mgr": "Organization Manager",
        "prj_mgr": "Project/Workflows Manager"
      }
    }
  },
  "security": [
    {
      "Keycloak": [
        "dat_mgr",
        "end_usr",
        "lex_adm",
        "lex_sup",
        "org_mgr",
        "prj_mgr"
      ]
    }
  ],
  "tags": [
    {
      "description": "Actions relating to the access control and roles of the users",
      "name": "accessManagement"
    },
    {
      "description": "Actions relating to the reporting of the state of the service",
      "name": "statusManagement"
    },
    {
      "description": "Actions relating to management of users",
      "name": "userManagement"
    },
    {
      "description": "Actions relating to management of organizations",
      "name": "organizationManagement"
    },
    {
      "description": "Actions relating to management of projects",
      "name": "projectManagement"
    },
    {
      "description": "Actions relating to management of hpc resources",
      "name": "hpcManagement"
    },
    {
      "description": "Actions relating to management of the invitations to join organizations/projects",
      "name": "invitationsManagement"
    }
  ]
}`))
}
