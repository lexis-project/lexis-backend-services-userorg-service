// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/lexis-project/lexis-backend-services-userorg-service.git/restapi/operations/access_management"
	"github.com/lexis-project/lexis-backend-services-userorg-service.git/restapi/operations/hpc_management"
	"github.com/lexis-project/lexis-backend-services-userorg-service.git/restapi/operations/organization_management"
	"github.com/lexis-project/lexis-backend-services-userorg-service.git/restapi/operations/project_management"
	"github.com/lexis-project/lexis-backend-services-userorg-service.git/restapi/operations/status_management"
	"github.com/lexis-project/lexis-backend-services-userorg-service.git/restapi/operations/user_management"
)

// NewUserOrganizationAPIAPI creates a new UserOrganizationAPI instance
func NewUserOrganizationAPIAPI(spec *loads.Document) *UserOrganizationAPIAPI {
	return &UserOrganizationAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		AccessManagementAddRoleHandler: access_management.AddRoleHandlerFunc(func(params access_management.AddRoleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation access_management.AddRole has not yet been implemented")
		}),
		OrganizationManagementAddUserToOrganizationHandler: organization_management.AddUserToOrganizationHandlerFunc(func(params organization_management.AddUserToOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation organization_management.AddUserToOrganization has not yet been implemented")
		}),
		ProjectManagementAddUserToProjectHandler: project_management.AddUserToProjectHandlerFunc(func(params project_management.AddUserToProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_management.AddUserToProject has not yet been implemented")
		}),
		AccessManagementClearRoleHandler: access_management.ClearRoleHandlerFunc(func(params access_management.ClearRoleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation access_management.ClearRole has not yet been implemented")
		}),
		HpcManagementCreateHPCResourceHandler: hpc_management.CreateHPCResourceHandlerFunc(func(params hpc_management.CreateHPCResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation hpc_management.CreateHPCResource has not yet been implemented")
		}),
		OrganizationManagementCreateOrganizationHandler: organization_management.CreateOrganizationHandlerFunc(func(params organization_management.CreateOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation organization_management.CreateOrganization has not yet been implemented")
		}),
		ProjectManagementCreateProjectHandler: project_management.CreateProjectHandlerFunc(func(params project_management.CreateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_management.CreateProject has not yet been implemented")
		}),
		UserManagementCreateUserHandler: user_management.CreateUserHandlerFunc(func(params user_management.CreateUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_management.CreateUser has not yet been implemented")
		}),
		HpcManagementDeleteHPCResourceHandler: hpc_management.DeleteHPCResourceHandlerFunc(func(params hpc_management.DeleteHPCResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation hpc_management.DeleteHPCResource has not yet been implemented")
		}),
		OrganizationManagementDeleteOrganizationHandler: organization_management.DeleteOrganizationHandlerFunc(func(params organization_management.DeleteOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation organization_management.DeleteOrganization has not yet been implemented")
		}),
		ProjectManagementDeleteProjectHandler: project_management.DeleteProjectHandlerFunc(func(params project_management.DeleteProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_management.DeleteProject has not yet been implemented")
		}),
		UserManagementDeleteUserHandler: user_management.DeleteUserHandlerFunc(func(params user_management.DeleteUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_management.DeleteUser has not yet been implemented")
		}),
		OrganizationManagementDeleteUserFromOrganizationHandler: organization_management.DeleteUserFromOrganizationHandlerFunc(func(params organization_management.DeleteUserFromOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation organization_management.DeleteUserFromOrganization has not yet been implemented")
		}),
		ProjectManagementDeleteUserFromProjectHandler: project_management.DeleteUserFromProjectHandlerFunc(func(params project_management.DeleteUserFromProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_management.DeleteUserFromProject has not yet been implemented")
		}),
		HpcManagementGetHPCResourceHandler: hpc_management.GetHPCResourceHandlerFunc(func(params hpc_management.GetHPCResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation hpc_management.GetHPCResource has not yet been implemented")
		}),
		OrganizationManagementGetOrganizationHandler: organization_management.GetOrganizationHandlerFunc(func(params organization_management.GetOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation organization_management.GetOrganization has not yet been implemented")
		}),
		ProjectManagementGetProjectHandler: project_management.GetProjectHandlerFunc(func(params project_management.GetProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_management.GetProject has not yet been implemented")
		}),
		StatusManagementGetStatusHandler: status_management.GetStatusHandlerFunc(func(params status_management.GetStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation status_management.GetStatus has not yet been implemented")
		}),
		UserManagementGetUserHandler: user_management.GetUserHandlerFunc(func(params user_management.GetUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_management.GetUser has not yet been implemented")
		}),
		HpcManagementListHPCResourcesHandler: hpc_management.ListHPCResourcesHandlerFunc(func(params hpc_management.ListHPCResourcesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation hpc_management.ListHPCResources has not yet been implemented")
		}),
		OrganizationManagementListOrganizationsHandler: organization_management.ListOrganizationsHandlerFunc(func(params organization_management.ListOrganizationsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation organization_management.ListOrganizations has not yet been implemented")
		}),
		ProjectManagementListProjectsHandler: project_management.ListProjectsHandlerFunc(func(params project_management.ListProjectsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_management.ListProjects has not yet been implemented")
		}),
		UserManagementListUsersHandler: user_management.ListUsersHandlerFunc(func(params user_management.ListUsersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_management.ListUsers has not yet been implemented")
		}),
		StatusManagementShowStatusHandler: status_management.ShowStatusHandlerFunc(func(params status_management.ShowStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation status_management.ShowStatus has not yet been implemented")
		}),
		HpcManagementUpdateHPCResourceHandler: hpc_management.UpdateHPCResourceHandlerFunc(func(params hpc_management.UpdateHPCResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation hpc_management.UpdateHPCResource has not yet been implemented")
		}),
		OrganizationManagementUpdateOrganizationHandler: organization_management.UpdateOrganizationHandlerFunc(func(params organization_management.UpdateOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation organization_management.UpdateOrganization has not yet been implemented")
		}),
		ProjectManagementUpdateProjectHandler: project_management.UpdateProjectHandlerFunc(func(params project_management.UpdateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project_management.UpdateProject has not yet been implemented")
		}),
		UserManagementUpdateUserHandler: user_management.UpdateUserHandlerFunc(func(params user_management.UpdateUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_management.UpdateUser has not yet been implemented")
		}),

		// Applies when the "X-API-KEY" header is set
		APIKeyHeaderAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (APIKeyHeader) X-API-KEY from header param [X-API-KEY] has not yet been implemented")
		},
		// Applies when the "api_key" query is set
		APIKeyParamAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (APIKeyParam) api_key from query param [api_key] has not yet been implemented")
		},
		KeycloakAuth: func(token string, scopes []string) (interface{}, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (Keycloak) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*UserOrganizationAPIAPI An API which supports management of customers and organizations within the LEXIS portal; this version is intended for use in LEXIS Portal R1 */
type UserOrganizationAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// APIKeyHeaderAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key X-API-KEY provided in the header
	APIKeyHeaderAuth func(string) (interface{}, error)

	// APIKeyParamAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key api_key provided in the query
	APIKeyParamAuth func(string) (interface{}, error)

	// KeycloakAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	KeycloakAuth func(string, []string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// AccessManagementAddRoleHandler sets the operation handler for the add role operation
	AccessManagementAddRoleHandler access_management.AddRoleHandler
	// OrganizationManagementAddUserToOrganizationHandler sets the operation handler for the add user to organization operation
	OrganizationManagementAddUserToOrganizationHandler organization_management.AddUserToOrganizationHandler
	// ProjectManagementAddUserToProjectHandler sets the operation handler for the add user to project operation
	ProjectManagementAddUserToProjectHandler project_management.AddUserToProjectHandler
	// AccessManagementClearRoleHandler sets the operation handler for the clear role operation
	AccessManagementClearRoleHandler access_management.ClearRoleHandler
	// HpcManagementCreateHPCResourceHandler sets the operation handler for the create h p c resource operation
	HpcManagementCreateHPCResourceHandler hpc_management.CreateHPCResourceHandler
	// OrganizationManagementCreateOrganizationHandler sets the operation handler for the create organization operation
	OrganizationManagementCreateOrganizationHandler organization_management.CreateOrganizationHandler
	// ProjectManagementCreateProjectHandler sets the operation handler for the create project operation
	ProjectManagementCreateProjectHandler project_management.CreateProjectHandler
	// UserManagementCreateUserHandler sets the operation handler for the create user operation
	UserManagementCreateUserHandler user_management.CreateUserHandler
	// HpcManagementDeleteHPCResourceHandler sets the operation handler for the delete h p c resource operation
	HpcManagementDeleteHPCResourceHandler hpc_management.DeleteHPCResourceHandler
	// OrganizationManagementDeleteOrganizationHandler sets the operation handler for the delete organization operation
	OrganizationManagementDeleteOrganizationHandler organization_management.DeleteOrganizationHandler
	// ProjectManagementDeleteProjectHandler sets the operation handler for the delete project operation
	ProjectManagementDeleteProjectHandler project_management.DeleteProjectHandler
	// UserManagementDeleteUserHandler sets the operation handler for the delete user operation
	UserManagementDeleteUserHandler user_management.DeleteUserHandler
	// OrganizationManagementDeleteUserFromOrganizationHandler sets the operation handler for the delete user from organization operation
	OrganizationManagementDeleteUserFromOrganizationHandler organization_management.DeleteUserFromOrganizationHandler
	// ProjectManagementDeleteUserFromProjectHandler sets the operation handler for the delete user from project operation
	ProjectManagementDeleteUserFromProjectHandler project_management.DeleteUserFromProjectHandler
	// HpcManagementGetHPCResourceHandler sets the operation handler for the get h p c resource operation
	HpcManagementGetHPCResourceHandler hpc_management.GetHPCResourceHandler
	// OrganizationManagementGetOrganizationHandler sets the operation handler for the get organization operation
	OrganizationManagementGetOrganizationHandler organization_management.GetOrganizationHandler
	// ProjectManagementGetProjectHandler sets the operation handler for the get project operation
	ProjectManagementGetProjectHandler project_management.GetProjectHandler
	// StatusManagementGetStatusHandler sets the operation handler for the get status operation
	StatusManagementGetStatusHandler status_management.GetStatusHandler
	// UserManagementGetUserHandler sets the operation handler for the get user operation
	UserManagementGetUserHandler user_management.GetUserHandler
	// HpcManagementListHPCResourcesHandler sets the operation handler for the list h p c resources operation
	HpcManagementListHPCResourcesHandler hpc_management.ListHPCResourcesHandler
	// OrganizationManagementListOrganizationsHandler sets the operation handler for the list organizations operation
	OrganizationManagementListOrganizationsHandler organization_management.ListOrganizationsHandler
	// ProjectManagementListProjectsHandler sets the operation handler for the list projects operation
	ProjectManagementListProjectsHandler project_management.ListProjectsHandler
	// UserManagementListUsersHandler sets the operation handler for the list users operation
	UserManagementListUsersHandler user_management.ListUsersHandler
	// StatusManagementShowStatusHandler sets the operation handler for the show status operation
	StatusManagementShowStatusHandler status_management.ShowStatusHandler
	// HpcManagementUpdateHPCResourceHandler sets the operation handler for the update h p c resource operation
	HpcManagementUpdateHPCResourceHandler hpc_management.UpdateHPCResourceHandler
	// OrganizationManagementUpdateOrganizationHandler sets the operation handler for the update organization operation
	OrganizationManagementUpdateOrganizationHandler organization_management.UpdateOrganizationHandler
	// ProjectManagementUpdateProjectHandler sets the operation handler for the update project operation
	ProjectManagementUpdateProjectHandler project_management.UpdateProjectHandler
	// UserManagementUpdateUserHandler sets the operation handler for the update user operation
	UserManagementUpdateUserHandler user_management.UpdateUserHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *UserOrganizationAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *UserOrganizationAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *UserOrganizationAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *UserOrganizationAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *UserOrganizationAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *UserOrganizationAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *UserOrganizationAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *UserOrganizationAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *UserOrganizationAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the UserOrganizationAPIAPI
func (o *UserOrganizationAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.APIKeyHeaderAuth == nil {
		unregistered = append(unregistered, "XAPIKEYAuth")
	}
	if o.APIKeyParamAuth == nil {
		unregistered = append(unregistered, "APIKeyAuth")
	}
	if o.KeycloakAuth == nil {
		unregistered = append(unregistered, "KeycloakAuth")
	}

	if o.AccessManagementAddRoleHandler == nil {
		unregistered = append(unregistered, "access_management.AddRoleHandler")
	}
	if o.OrganizationManagementAddUserToOrganizationHandler == nil {
		unregistered = append(unregistered, "organization_management.AddUserToOrganizationHandler")
	}
	if o.ProjectManagementAddUserToProjectHandler == nil {
		unregistered = append(unregistered, "project_management.AddUserToProjectHandler")
	}
	if o.AccessManagementClearRoleHandler == nil {
		unregistered = append(unregistered, "access_management.ClearRoleHandler")
	}
	if o.HpcManagementCreateHPCResourceHandler == nil {
		unregistered = append(unregistered, "hpc_management.CreateHPCResourceHandler")
	}
	if o.OrganizationManagementCreateOrganizationHandler == nil {
		unregistered = append(unregistered, "organization_management.CreateOrganizationHandler")
	}
	if o.ProjectManagementCreateProjectHandler == nil {
		unregistered = append(unregistered, "project_management.CreateProjectHandler")
	}
	if o.UserManagementCreateUserHandler == nil {
		unregistered = append(unregistered, "user_management.CreateUserHandler")
	}
	if o.HpcManagementDeleteHPCResourceHandler == nil {
		unregistered = append(unregistered, "hpc_management.DeleteHPCResourceHandler")
	}
	if o.OrganizationManagementDeleteOrganizationHandler == nil {
		unregistered = append(unregistered, "organization_management.DeleteOrganizationHandler")
	}
	if o.ProjectManagementDeleteProjectHandler == nil {
		unregistered = append(unregistered, "project_management.DeleteProjectHandler")
	}
	if o.UserManagementDeleteUserHandler == nil {
		unregistered = append(unregistered, "user_management.DeleteUserHandler")
	}
	if o.OrganizationManagementDeleteUserFromOrganizationHandler == nil {
		unregistered = append(unregistered, "organization_management.DeleteUserFromOrganizationHandler")
	}
	if o.ProjectManagementDeleteUserFromProjectHandler == nil {
		unregistered = append(unregistered, "project_management.DeleteUserFromProjectHandler")
	}
	if o.HpcManagementGetHPCResourceHandler == nil {
		unregistered = append(unregistered, "hpc_management.GetHPCResourceHandler")
	}
	if o.OrganizationManagementGetOrganizationHandler == nil {
		unregistered = append(unregistered, "organization_management.GetOrganizationHandler")
	}
	if o.ProjectManagementGetProjectHandler == nil {
		unregistered = append(unregistered, "project_management.GetProjectHandler")
	}
	if o.StatusManagementGetStatusHandler == nil {
		unregistered = append(unregistered, "status_management.GetStatusHandler")
	}
	if o.UserManagementGetUserHandler == nil {
		unregistered = append(unregistered, "user_management.GetUserHandler")
	}
	if o.HpcManagementListHPCResourcesHandler == nil {
		unregistered = append(unregistered, "hpc_management.ListHPCResourcesHandler")
	}
	if o.OrganizationManagementListOrganizationsHandler == nil {
		unregistered = append(unregistered, "organization_management.ListOrganizationsHandler")
	}
	if o.ProjectManagementListProjectsHandler == nil {
		unregistered = append(unregistered, "project_management.ListProjectsHandler")
	}
	if o.UserManagementListUsersHandler == nil {
		unregistered = append(unregistered, "user_management.ListUsersHandler")
	}
	if o.StatusManagementShowStatusHandler == nil {
		unregistered = append(unregistered, "status_management.ShowStatusHandler")
	}
	if o.HpcManagementUpdateHPCResourceHandler == nil {
		unregistered = append(unregistered, "hpc_management.UpdateHPCResourceHandler")
	}
	if o.OrganizationManagementUpdateOrganizationHandler == nil {
		unregistered = append(unregistered, "organization_management.UpdateOrganizationHandler")
	}
	if o.ProjectManagementUpdateProjectHandler == nil {
		unregistered = append(unregistered, "project_management.UpdateProjectHandler")
	}
	if o.UserManagementUpdateUserHandler == nil {
		unregistered = append(unregistered, "user_management.UpdateUserHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *UserOrganizationAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *UserOrganizationAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "APIKeyHeader":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.APIKeyHeaderAuth)

		case "APIKeyParam":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.APIKeyParamAuth)

		case "Keycloak":
			result[name] = o.BearerAuthenticator(name, o.KeycloakAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *UserOrganizationAPIAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *UserOrganizationAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *UserOrganizationAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *UserOrganizationAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the user organization API API
func (o *UserOrganizationAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *UserOrganizationAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/authz/{userID}/add/{role}"] = access_management.NewAddRole(o.context, o.AccessManagementAddRoleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/organization/{id}/user/{userID}"] = organization_management.NewAddUserToOrganization(o.context, o.OrganizationManagementAddUserToOrganizationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/project/{id}/user/{userID}"] = project_management.NewAddUserToProject(o.context, o.ProjectManagementAddUserToProjectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/authz/{userID}/clear"] = access_management.NewClearRole(o.context, o.AccessManagementClearRoleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/hpc/resource"] = hpc_management.NewCreateHPCResource(o.context, o.HpcManagementCreateHPCResourceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/organization"] = organization_management.NewCreateOrganization(o.context, o.OrganizationManagementCreateOrganizationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project"] = project_management.NewCreateProject(o.context, o.ProjectManagementCreateProjectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user"] = user_management.NewCreateUser(o.context, o.UserManagementCreateUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/hpc/resource/{id}"] = hpc_management.NewDeleteHPCResource(o.context, o.HpcManagementDeleteHPCResourceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/organization/{id}"] = organization_management.NewDeleteOrganization(o.context, o.OrganizationManagementDeleteOrganizationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/{id}"] = project_management.NewDeleteProject(o.context, o.ProjectManagementDeleteProjectHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/{id}"] = user_management.NewDeleteUser(o.context, o.UserManagementDeleteUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/organization/{id}/user/{userID}"] = organization_management.NewDeleteUserFromOrganization(o.context, o.OrganizationManagementDeleteUserFromOrganizationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/{id}/user/{userID}"] = project_management.NewDeleteUserFromProject(o.context, o.ProjectManagementDeleteUserFromProjectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/hpc/resource/{id}"] = hpc_management.NewGetHPCResource(o.context, o.HpcManagementGetHPCResourceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organization/{id}"] = organization_management.NewGetOrganization(o.context, o.OrganizationManagementGetOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/{id}"] = project_management.NewGetProject(o.context, o.ProjectManagementGetProjectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status/{id}"] = status_management.NewGetStatus(o.context, o.StatusManagementGetStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/{id}"] = user_management.NewGetUser(o.context, o.UserManagementGetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/hpc/resource"] = hpc_management.NewListHPCResources(o.context, o.HpcManagementListHPCResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organization"] = organization_management.NewListOrganizations(o.context, o.OrganizationManagementListOrganizationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project"] = project_management.NewListProjects(o.context, o.ProjectManagementListProjectsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user"] = user_management.NewListUsers(o.context, o.UserManagementListUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status"] = status_management.NewShowStatus(o.context, o.StatusManagementShowStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/hpc/resource/{id}"] = hpc_management.NewUpdateHPCResource(o.context, o.HpcManagementUpdateHPCResourceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/organization/{id}"] = organization_management.NewUpdateOrganization(o.context, o.OrganizationManagementUpdateOrganizationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/project/{id}"] = project_management.NewUpdateProject(o.context, o.ProjectManagementUpdateProjectHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/{id}"] = user_management.NewUpdateUser(o.context, o.UserManagementUpdateUserHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *UserOrganizationAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *UserOrganizationAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *UserOrganizationAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *UserOrganizationAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *UserOrganizationAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
