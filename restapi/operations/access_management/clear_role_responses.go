// Code generated by go-swagger; DO NOT EDIT.

package access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-userorg-service.git/models"
)

// ClearRoleOKCode is the HTTP code returned for type ClearRoleOK
const ClearRoleOKCode int = 200

/*ClearRoleOK Role added successfully

swagger:response clearRoleOK
*/
type ClearRoleOK struct {

	/*
	  In: Body
	*/
	Payload *models.RoleAdded `json:"body,omitempty"`
}

// NewClearRoleOK creates ClearRoleOK with default headers values
func NewClearRoleOK() *ClearRoleOK {

	return &ClearRoleOK{}
}

// WithPayload adds the payload to the clear role o k response
func (o *ClearRoleOK) WithPayload(payload *models.RoleAdded) *ClearRoleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the clear role o k response
func (o *ClearRoleOK) SetPayload(payload *models.RoleAdded) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClearRoleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClearRoleUnauthorizedCode is the HTTP code returned for type ClearRoleUnauthorized
const ClearRoleUnauthorizedCode int = 401

/*ClearRoleUnauthorized Authorization error

swagger:response clearRoleUnauthorized
*/
type ClearRoleUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewClearRoleUnauthorized creates ClearRoleUnauthorized with default headers values
func NewClearRoleUnauthorized() *ClearRoleUnauthorized {

	return &ClearRoleUnauthorized{}
}

// WithPayload adds the payload to the clear role unauthorized response
func (o *ClearRoleUnauthorized) WithPayload(payload *models.ErrorResponse) *ClearRoleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the clear role unauthorized response
func (o *ClearRoleUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClearRoleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClearRoleForbiddenCode is the HTTP code returned for type ClearRoleForbidden
const ClearRoleForbiddenCode int = 403

/*ClearRoleForbidden Authorization error

swagger:response clearRoleForbidden
*/
type ClearRoleForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewClearRoleForbidden creates ClearRoleForbidden with default headers values
func NewClearRoleForbidden() *ClearRoleForbidden {

	return &ClearRoleForbidden{}
}

// WithPayload adds the payload to the clear role forbidden response
func (o *ClearRoleForbidden) WithPayload(payload *models.ErrorResponse) *ClearRoleForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the clear role forbidden response
func (o *ClearRoleForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClearRoleForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClearRoleNotFoundCode is the HTTP code returned for type ClearRoleNotFound
const ClearRoleNotFoundCode int = 404

/*ClearRoleNotFound user/org/prj not found

swagger:response clearRoleNotFound
*/
type ClearRoleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.MissingResponse `json:"body,omitempty"`
}

// NewClearRoleNotFound creates ClearRoleNotFound with default headers values
func NewClearRoleNotFound() *ClearRoleNotFound {

	return &ClearRoleNotFound{}
}

// WithPayload adds the payload to the clear role not found response
func (o *ClearRoleNotFound) WithPayload(payload *models.MissingResponse) *ClearRoleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the clear role not found response
func (o *ClearRoleNotFound) SetPayload(payload *models.MissingResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClearRoleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClearRoleInternalServerErrorCode is the HTTP code returned for type ClearRoleInternalServerError
const ClearRoleInternalServerErrorCode int = 500

/*ClearRoleInternalServerError unexpected error

swagger:response clearRoleInternalServerError
*/
type ClearRoleInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewClearRoleInternalServerError creates ClearRoleInternalServerError with default headers values
func NewClearRoleInternalServerError() *ClearRoleInternalServerError {

	return &ClearRoleInternalServerError{}
}

// WithPayload adds the payload to the clear role internal server error response
func (o *ClearRoleInternalServerError) WithPayload(payload *models.ErrorResponse) *ClearRoleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the clear role internal server error response
func (o *ClearRoleInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClearRoleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
